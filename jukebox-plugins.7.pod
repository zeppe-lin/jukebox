=pod

=encoding UTF-8

=head1 NAME

jukebox-plugins - A guide to writing plugins for the jukebox music
player

=head1 DESCRIPTION

Jukebox is a feature-rich music player that allows users to extend its
functionality through plugins.  Jukebox is a fork of the popular
gmusicbrowser.  Plugins can add new features, modify existing
behavior, or integrate with external services.  This manual provides a
basic guide to writing plugins for jukebox.

=head2 Plugin File Structure

A jukebox plugin is typically a Perl module file (ending with C<.pm>).
It should start with a package declaration and include a special
metadata block that jukebox uses to identify and manage the plugin.

=head2 Metadata Block

The metadata block starts with C<=for gmbplugin> followed by the
plugin's identifier, and ends with C<=cut>.  This block contains
information about the plugin:

  =for gmbplugin PLUGIN_IDENTIFIER
  name    Plugin Name (e.g., Notify)
  title   Plugin Title (e.g., Notify plugin)
  desc    Plugin Description (e.g., Notifies you of the playing song...)
  req     Dependencies (e.g., perl(Gtk2::Notify))
  =cut

=over

=item * B<PLUGIN_IDENTIFIER>

A unique identifier for your plugin (often the same as the plugin's name).

=item * B<name>

The internal name of the plugin.

=item * B<title>

A user-friendly title for the plugin, displayed in the preferences.

=item * B<desc>

A short description of what the plugin does.

=item * B<req>

A list of dependencies required by the plugin.  This can include Perl
modules (e.g., C<perl(ModuleName)>) or other system packages.

=back

=head2 Package Declaration

After the metadata block, you should declare the package for your plugin:

  package GMB::Plugin::PLUGIN_IDENTIFIER;

Replace B<PLUGIN_IDENTIFIER> with the same identifier you used in the
metadata block.

=head2 Required Subroutines

A basic jukebox plugin needs to implement at least the following
subroutines:

=over

=item * B<Start()>

This subroutine is called when the plugin is started by jukebox.  It's
where you should initialize your plugin, connect to signals, and set
up any necessary resources.

=item * B<Stop()>

This subroutine is called when the plugin is stopped (e.g., when
jukebox is closed or the plugin is disabled).  You should use this to
clean up any resources used by your plugin (e.g., unwatch signals,
undefine objects).

=item * B<prefbox()>

This subroutine should return a Gtk2 widget (typically a
B<Gtk2::VBox>) containing the preferences dialog for your plugin.
This allows users to configure the plugin's behavior.

=back

=head2 Jukebox API and Helper Functions

Jukebox provides several functions and global variables that plugins can use:

=over

=item * B<::Watch($object, $event_name, \&callback)>

This function allows your plugin to monitor events within jukebox.
When the specified I<$event_name> occurs on the I<$object>, the
I<\&callback> subroutine will be called.  For example, to watch for
changes in the playing song, you might use B<::Watch($notify,
'PlayingSong', \&Changed)>.

=item * B<::UnWatch_all($object)>

This function removes all event watches associated with the given
I<$object>.

=item * B<::SetDefaultOptions(OPT, ...)>

This function is used to set default values for your plugin's options.
The I<OPT> argument is a constant (e.g., C<'PLUGIN_IDENTIFIER_'>) that
serves as a prefix for your plugin's option names.

=item * B<::NewPrefEntry($option_name, $label, %options)>

Creates a Gtk2 entry widget for a preference setting.

=item * B<::NewPrefSpinButton($option_name, $min, $max, %options)>

Creates a Gtk2 spin button widget for a preference setting.

=item * B<::NewPrefCheckButton($option_name, $label, %options)>

Creates a Gtk2 check button widget for a preference setting.

=item * B<::ReplaceFields($song_id, $template)>

Replaces placeholders (like C<%S> for song title, C<%a> for artist,
C<%l> for album) in a template string with the metadata of the song
identified by I<$song_id>.

=item * B<::ReplaceFieldsAndEsc($song_id, $template)>

Similar to B<::ReplaceFields()>, but also escapes any markup in the
replaced values.

=item * B<$::SongID>

A global variable that holds the ID of the currently playing song.

=item * B<$::Options{OPT . 'option_name'}>

A hash containing the user-configured options for your plugin.

=item * B<$::MainWindow>

A global variable that might hold the main jukebox window object.

=item * B<::IsWindowVisible($window_object)>

A function to check if a given Gtk2 window object is visible.

=item * Playback Control Functions

Functions like B<::PrevSong()>, B<::Stop()>, B<::NextSong()>,
B<::PlayPause()> (not seen in the example but likely available) can be
called to control playback.

=item * B<::ShowHide()>

A function to show or hide the main jukebox window.

=item * B<Songs::Get_gid($song_id, $field)>

A function to get the group ID (e.g., for album art) associated with a
song.

=item * B<AAPicture::pixbuf($type, $gid, $size, $keep_aspect)>

A function to load and resize a picture (e.g., album art).

=item * B<$::Command{CommandName} = [\&callback, "Menu Text"];>

Allows you to add custom commands to jukebox's menus.

=back

=head2 Example Plugin Structure

  =for gmbplugin MY_PLUGIN
  name    MyPlugin
  title   My Awesome Plugin
  desc    Does something cool.
  req     perl(Some::Module)
  =cut

  package GMB::Plugin::MY_PLUGIN;

  use strict;
  use warnings;

  use constant { OPT => 'PLUGIN_MY_PLUGIN_', };

  ::SetDefaultOptions(OPT,
      some_option => 'default value',
  );

  sub Start {
      print "MyPlugin started!\n";
      # Initialize resources, connect signals, etc.
  }

  sub Stop {
      print "MyPlugin stopped.\n";
      # Clean up resources.
  }

  sub prefbox {
      my $vbox = Gtk2::VBox->new(::FALSE, 2);
      my $entry = ::NewPrefEntry(OPT . 'some_option', "Some Option:",
          tip => "Enter a value here.");
      $vbox->pack_start($entry, ::FALSE, ::FALSE, 2);
      return $vbox;
  }

  1;

=head2 Further Learning

To write more advanced plugins, you will need to learn more about Perl
programming, the Gtk2 toolkit (as jukebox uses it for its interface),
and the specific API provided by jukebox.  Examining the code of
existing plugins (like the B<notify.pm> plugin) can also be very
helpful in understanding how things work.  This manual provides a
basic foundation for writing jukebox plugins.  As you develop more
complex plugins, you will likely need to refer to the jukebox source
code and potentially the documentation for the underlying libraries
(like Gtk2 and any other modules you use).

=cut

# vim: sw=2 ts=2 sts=2 et cc=72 tw=70
# End of file.
